name: Rust

permissions:
  contents: write

on:
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/rust.yml"
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"
    tags: ["v*.*.*"]
  pull_request:
    paths:
      - ".github/workflows/rust.yml"
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"
  merge_group:

env:
  CARGO_TERM_COLOR: always
  CRATE_NAME: fenv

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  status-check:
    needs: [build-on-ubuntu, build-on-macos]

    runs-on: ubuntu-latest

    if: failure()

    steps:
      - uses: actions/checkout@v5

      - run: |
          echo "Validation failure"
          exit 1

  build-on-ubuntu:
    strategy:
      matrix:
        target:
          # - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          # - i686-unknown-linux-gnu
          # - i686-unknown-linux-musl
          # - i686-unknown-freebsd
          # - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          # - x86_64-unknown-freebsd
          # - x86_64-unknown-netbsd

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}
          components: llvm-tools-preview

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: "${{ matrix.target }}"

      - name: Build debug
        if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --target ${{ matrix.target }}

      - name: Build release
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }} --locked

      - name: Test debug
        if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: test
          args: --target ${{ matrix.target }}

      - name: Test release
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: test
          args: --release --target ${{ matrix.target }} --locked

      - name: Generate code coverage reports
        if: ${{ matrix.target == 'x86_64-unknown-linux-musl' && ! startsWith(github.ref, 'refs/tags/') && github.event_name != 'merge_group' }}
        run: tools/coverage.sh

      - name: Upload to Coveralls
        if: ${{ matrix.target == 'x86_64-unknown-linux-musl' && ! startsWith(github.ref, 'refs/tags/') && github.event_name != 'merge_group' }}
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          format: lcov
          files: coverage/tests.lcov

      - name: Pre-release
        if: |
          startsWith(github.repository, 'fenv-org') &&
          startsWith(github.ref, 'refs/tags/')
        run: echo "github.ref=${{ github.ref }}" &&
          zip -r ${{ env.CRATE_NAME }}-${{ matrix.target}}.zip ${{ env.CRATE_NAME}}
        working-directory: target/${{ matrix.target}}/release

      - name: Release
        uses: softprops/action-gh-release@v2
        if: |
          startsWith(github.repository, 'fenv-org') &&
          startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/${{ matrix.target }}/release/${{ env.CRATE_NAME }}-${{ matrix.target }}.zip
          draft: true

  build-on-macos:
    strategy:
      matrix:
        target:
          - aarch64-apple-darwin
          - x86_64-apple-darwin
        include:
          - target: aarch64-apple-darwin
            skip-test: true

    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v5

      - name: Install OpenSSL
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}
          components: llvm-tools-preview

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: "${{ matrix.target }}"
          cache-directories: "/Users/runner/bin"

      - name: Build debug
        if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }}

      - name: Build release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }} --locked

      - name: Test debug
        if: ${{ ! startsWith(github.ref, 'refs/tags/') && ! matrix.skip-test }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --target ${{ matrix.target }}

      - name: Test release
        if: ${{ ! matrix.skip-test }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --target ${{ matrix.target }} --locked

      - name: Pre-release
        if: |
          startsWith(github.repository, 'fenv-org') &&
          startsWith(github.ref, 'refs/tags/')
        run: echo "github.ref=${{ github.ref }}" &&
          zip -r ${{ env.CRATE_NAME }}-${{ matrix.target}}.zip ${{ env.CRATE_NAME}}
        working-directory: target/${{ matrix.target}}/release

      - name: Release
        uses: softprops/action-gh-release@v2
        if: |
          startsWith(github.repository, 'fenv-org') &&
          startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/${{ matrix.target }}/release/${{ env.CRATE_NAME }}-${{ matrix.target }}.zip
          draft: true
