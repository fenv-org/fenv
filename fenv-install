#!/usr/bin/env bash
# Summary: Install the given flutter SDK

set -e
[[ -n "$FENV_DEBUG" ]] && set -x

fvm_cache_dir=$FENV_ROOT/cache
fvm_remote_list_cache=$fvm_cache_dir/.remote_list
fvm_remote_list_cache_timestamp=$fvm_cache_dir/.remote_list_sync_time
list_up_remote_versions=""
should_bare=0

for args in "$@"
do
  case "$args" in
    "-l" | "--list" )
      list_up_remote_versions=1
      ;;

    "--bare" )
      should_bare=1
      ;;

    *)
      ;;
  esac
done

function main() {
  init_cache_dirs

  if [[ "$list_up_remote_versions" -eq 1 ]]; then
    show_remote_versions
    exit 0
  fi

  install_flutter_sdk $1
}

function show_remote_versions() {
  if [[ "$(is_cache_expired)" -eq 1 ]]; then
    download_latest_list
  fi

  if [[ "$should_bare" -eq 1 ]]; then
    cat $fvm_remote_list_cache
    exit
  fi

  local local_versions=$(fenv-versions 2> /dev/null)
  for version in $(cat $fvm_remote_list_cache); do
    if [[ "$(contains "$local_versions" "$version")" -eq 1 ]]; then
      printf "%-12s: %s" "$version" "downloaded"
      echo
    else
      echo $version
    fi
  done
}

function install_flutter_sdk() {
  local target_sdk_version=$1
  if [[ -z "$target_sdk_version" ]]; then
    >&2 echo "fenv: must provide the target flutter sdk version."
    exit 2
  fi

  local local_versions=$(fenv-versions 2> /dev/null)
  if [[ "$(contains "$local_versions" "$target_sdk_version")" -eq 1 ]]; then
    >&2 echo "fenv: '$target_sdk_version' has been already installed."
    exit 2
  fi

  local remote_versions=$(show_remote_versions)
  if ! [[ "$(contains "$remote_versions" "$target_sdk_version")" ]]; then
    >&2 echo "fenv: unknown version: '$target_sdk_version'."
    exit 2
  fi

  fenv--install-sdk \
    "$FENV_ROOT/versions/$target_sdk_version" \
    "$target_sdk_version"
}

function download_latest_list() {
  git ls-remote --tags git@github.com:flutter/flutter.git \
      | grep 'refs/tags/[0-9.]\+$' \
      | sed "s/^.*tags\///g" \
      | sort --version-sort > $fvm_remote_list_cache
  date +%s > $fvm_remote_list_cache_timestamp
}

function init_cache_dirs() {
  mkdir -p $fvm_cache_dir
}

function is_cache_expired() {
  if ! [[ -f "$fvm_remote_list_cache_timestamp" ]]; then
    echo 1
    return
  fi

  # Will expire in one minute.
  local cached_at=$(cat $fvm_remote_list_cache_timestamp)
  local expired_at=$(expr $cached_at + 60)
  expr $expired_at '<' $(date +%s)
}

function contains() {
  local group=$1
  local target=$2
  for cursor in $group; do
    if [[ "$target" == "$cursor" ]]; then
      echo 1
      return
    fi
  done
  return
}

main $@
